// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as $$Array               from "bs-platform/lib/es6/array.js";
import * as Curry                 from "bs-platform/lib/es6/curry.js";
import * as React                 from "react";
import * as Js_dict               from "bs-platform/lib/es6/js_dict.js";
import * as Js_json               from "bs-platform/lib/es6/js_json.js";
import * as Pervasives            from "bs-platform/lib/es6/pervasives.js";
import * as ReasonReact           from "reason-react/src/ReasonReact.js";
import * as RechatUtils           from "./RechatUtils.js";
import * as RechatApollo          from "./RechatApollo.js";
import * as Caml_exceptions       from "bs-platform/lib/es6/caml_exceptions.js";
import * as RechatMessageListItem from "./RechatMessageListItem.js";

var Graphql_error = Caml_exceptions.create("RechatWindow.GroupQuery.Graphql_error");

var query = "query GetChatGroup($chatGroupId: Int!)  {\nchatGroup(id: $chatGroupId)  {\nid  \nmessages  {\nid  \ntext  \nauthor  \n}\n}\n}";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match) {
    var value$1 = match[0]["chatGroup"];
    var match$1 = Js_json.decodeNull(value$1);
    var tmp;
    if (match$1) {
      tmp = /* None */0;
    } else {
      var match$2 = Js_json.decodeObject(value$1);
      var tmp$1;
      if (match$2) {
        var value$2 = match$2[0];
        var value$3 = value$2["id"];
        var match$3 = Js_json.decodeNull(value$3);
        var tmp$2;
        if (match$3) {
          tmp$2 = /* None */0;
        } else {
          var match$4 = Js_json.decodeNumber(value$3);
          var tmp$3;
          if (match$4) {
            tmp$3 = match$4[0] | 0;
          } else {
            throw Graphql_error;
          }
          tmp$2 = /* Some */[tmp$3];
        }
        var value$4 = value$2["messages"];
        var match$5 = Js_json.decodeNull(value$4);
        var tmp$4;
        if (match$5) {
          tmp$4 = /* None */0;
        } else {
          var match$6 = Js_json.decodeArray(value$4);
          var tmp$5;
          if (match$6) {
            tmp$5 = $$Array.map((function (value) {
                    var match = Js_json.decodeNull(value);
                    if (match) {
                      return /* None */0;
                    } else {
                      var match$1 = Js_json.decodeObject(value);
                      var tmp;
                      if (match$1) {
                        var value$1 = match$1[0];
                        var value$2 = value$1["id"];
                        var match$2 = Js_json.decodeNull(value$2);
                        var tmp$1;
                        if (match$2) {
                          tmp$1 = /* None */0;
                        } else {
                          var match$3 = Js_json.decodeNumber(value$2);
                          var tmp$2;
                          if (match$3) {
                            tmp$2 = match$3[0] | 0;
                          } else {
                            throw Graphql_error;
                          }
                          tmp$1 = /* Some */[tmp$2];
                        }
                        var value$3 = value$1["text"];
                        var match$4 = Js_json.decodeString(value$3);
                        var tmp$3;
                        if (match$4) {
                          tmp$3 = match$4[0];
                        } else {
                          throw Graphql_error;
                        }
                        var value$4 = value$1["author"];
                        var match$5 = Js_json.decodeNull(value$4);
                        var tmp$4;
                        if (match$5) {
                          tmp$4 = /* None */0;
                        } else {
                          var match$6 = Js_json.decodeNumber(value$4);
                          var tmp$5;
                          if (match$6) {
                            tmp$5 = match$6[0] | 0;
                          } else {
                            throw Graphql_error;
                          }
                          tmp$4 = /* Some */[tmp$5];
                        }
                        tmp = {
                          id: tmp$1,
                          text: tmp$3,
                          author: tmp$4
                        };
                      } else {
                        throw Graphql_error;
                      }
                      return /* Some */[tmp];
                    }
                  }), match$6[0]);
          } else {
            throw Graphql_error;
          }
          tmp$4 = /* Some */[tmp$5];
        }
        tmp$1 = {
          id: tmp$2,
          messages: tmp$4
        };
      } else {
        throw Graphql_error;
      }
      tmp = /* Some */[tmp$1];
    }
    return {
            chatGroup: tmp
          };
  } else {
    throw Graphql_error;
  }
}

function json_of_optional(encoder, value) {
  if (value) {
    return Curry._1(encoder, value[0]);
  } else {
    return null;
  }
}

var json_of_array = $$Array.map;

function json_of_Int(value) {
  return value;
}

function make(chatGroupId, _) {
  return {
          query: query,
          variables: Js_dict.fromList(/* :: */[
                /* tuple */[
                  "chatGroupId",
                  chatGroupId
                ],
                /* [] */0
              ]),
          parse: parse
        };
}

var GroupQuery = /* module */[
  /* Graphql_error */Graphql_error,
  /* query */query,
  /* parse */parse,
  /* json_of_optional */json_of_optional,
  /* json_of_array */json_of_array,
  /* json_of_Int */json_of_Int,
  /* make */make
];

var component = ReasonReact.statelessComponent("RechatWindow");

function renderChatMessageItem(message) {
  console.log(message);
  var getKey = function (msg) {
    var match = msg.id;
    if (match) {
      return Pervasives.string_of_int(match[0]);
    } else {
      return "no id";
    }
  };
  return ReasonReact.element(/* Some */[getKey(message)], /* None */0, RechatMessageListItem.make(message, /* array */[]));
}

function renderChatWindow(chatGroup) {
  var getMessageArray = function (messagesOption) {
    if (messagesOption) {
      return RechatUtils.arr_only_some(messagesOption[0]);
    } else {
      return /* array */[];
    }
  };
  var messageItems = $$Array.map(renderChatMessageItem, getMessageArray(chatGroup.messages));
  return React.createElement("div", {
              className: "RechatWindow"
            }, React.createElement("div", {
                  className: "header"
                }, RechatUtils.ste("CHAT WINDOW")), React.createElement("ul", undefined, messageItems));
}

function make$1() {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function () {
      var unexpectedError = React.createElement("div", undefined, "There was an internal error");
      var groupQuery = make(1, /* () */0);
      return ReasonReact.element(/* None */0, /* None */0, Curry._2(RechatApollo.Instance[/* Query */1][/* make */2], groupQuery, (function (response, parse) {
                        if (typeof response === "number") {
                          return React.createElement("div", undefined, "Loading");
                        } else if (response.tag) {
                          return React.createElement("div", undefined, response[0]);
                        } else {
                          var chatGroup = Curry._1(parse, response[0]).chatGroup;
                          if (chatGroup) {
                            return renderChatWindow(chatGroup[0]);
                          } else {
                            return unexpectedError;
                          }
                        }
                      })));
    });
  return newrecord;
}

var Query = 0;

export {
  GroupQuery            ,
  component             ,
  Query                 ,
  renderChatMessageItem ,
  renderChatWindow      ,
  make$1                  as make,
  
}
/* component Not a pure module */
